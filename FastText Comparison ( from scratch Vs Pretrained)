{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3316532,"sourceType":"datasetVersion","datasetId":10100}],"dockerImageVersionId":30684,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import numpy as np \nimport pandas as pd \nfrom gensim.models import FastText\nimport re\n\n\nimport nltk\nfrom nltk.tokenize import word_tokenize, sent_tokenize\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.stem import PorterStemmer\n\nfrom sklearn.metrics.pairwise import cosine_similarity\n\n\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-14T16:18:09.021674Z","iopub.execute_input":"2024-04-14T16:18:09.022804Z","iopub.status.idle":"2024-04-14T16:18:09.030975Z","shell.execute_reply.started":"2024-04-14T16:18:09.022745Z","shell.execute_reply":"2024-04-14T16:18:09.029203Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"code","source":"import random \nrandom.seed(42)","metadata":{"execution":{"iopub.status.busy":"2024-04-14T16:10:46.955574Z","iopub.execute_input":"2024-04-14T16:10:46.956363Z","iopub.status.idle":"2024-04-14T16:10:46.962282Z","shell.execute_reply.started":"2024-04-14T16:10:46.956319Z","shell.execute_reply":"2024-04-14T16:10:46.960862Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"import fasttext.util\nfasttext.util.download_model('en', if_exists='ignore')  # English\nft = fasttext.load_model('cc.en.300.bin')","metadata":{"execution":{"iopub.status.busy":"2024-04-14T16:10:46.965414Z","iopub.execute_input":"2024-04-14T16:10:46.965827Z","iopub.status.idle":"2024-04-14T16:11:31.616348Z","shell.execute_reply.started":"2024-04-14T16:10:46.965774Z","shell.execute_reply":"2024-04-14T16:11:31.614423Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stderr","text":"Warning : `load_model` does not return WordVectorModel or SupervisedModel any more, but a `FastText` object which is very similar.\n","output_type":"stream"}]},{"cell_type":"code","source":"ds = pd.read_json('/kaggle/input/yelp-dataset/yelp_academic_dataset_tip.json' , lines = True)","metadata":{"execution":{"iopub.status.busy":"2024-04-14T16:11:31.618530Z","iopub.execute_input":"2024-04-14T16:11:31.619074Z","iopub.status.idle":"2024-04-14T16:11:41.340821Z","shell.execute_reply.started":"2024-04-14T16:11:31.619026Z","shell.execute_reply":"2024-04-14T16:11:41.339470Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"ds","metadata":{"execution":{"iopub.status.busy":"2024-04-14T16:11:41.342467Z","iopub.execute_input":"2024-04-14T16:11:41.342859Z","iopub.status.idle":"2024-04-14T16:11:41.372207Z","shell.execute_reply.started":"2024-04-14T16:11:41.342828Z","shell.execute_reply":"2024-04-14T16:11:41.370774Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"                       user_id             business_id  \\\n0       AGNUgVwnZUey3gcPCJ76iw  3uLgwr0qeCNMjKenHJwPGQ   \n1       NBN4MgHP9D3cw--SnauTkA  QoezRbYQncpRqyrLH6Iqjg   \n2       -copOvldyKh1qr-vzkDEvw  MYoRNLb5chwjQe3c_k37Gg   \n3       FjMQVZjSqY8syIO-53KFKw  hV-bABTK-glh5wj31ps_Jw   \n4       ld0AperBXk1h6UbqmM80zw  _uN0OudeJ3Zl_tf6nxg5ww   \n...                        ...                     ...   \n908910  eYodOTF8pkqKPzHkcxZs-Q  3lHTewuKFt5IImbXJoFeDQ   \n908911  1uxtQAuJ2T5Xwa_wp7kUnA  OaGf0Dp56ARhQwIDT90w_g   \n908912  v48Spe6WEpqehsF2xQADpg  hYnMeAO77RGyTtIzUSKYzQ   \n908913  ckqKGM2hl7I9Chp5IpAhkw  s2eyoTuJrcP7I_XyjdhUHQ   \n908914  4tF1CWdMxvvwpUIgGsDygA  _cb1Vg1NIWry8UA0jyuXnQ   \n\n                                                     text                date  \\\n0                          Avengers time with the ladies. 2012-05-18 02:17:21   \n1       They have lots of good deserts and tasty cuban... 2013-02-05 18:35:10   \n2                  It's open even when you think it isn't 2013-08-18 00:56:08   \n3                               Very decent fried chicken 2017-06-27 23:05:38   \n4                  Appetizers.. platter special for lunch 2012-10-06 19:43:09   \n...                                                   ...                 ...   \n908910              Disappointed in one of your managers. 2021-09-11 19:18:57   \n908911                            Great food and service. 2021-10-30 11:54:36   \n908912                                Love their Cubans!! 2021-11-05 13:18:56   \n908913                            Great pizza great price 2021-11-20 16:11:44   \n908914                  Food is good value but a bit hot! 2021-12-07 22:30:00   \n\n        compliment_count  \n0                      0  \n1                      0  \n2                      0  \n3                      0  \n4                      0  \n...                  ...  \n908910                 0  \n908911                 0  \n908912                 0  \n908913                 0  \n908914                 0  \n\n[908915 rows x 5 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>user_id</th>\n      <th>business_id</th>\n      <th>text</th>\n      <th>date</th>\n      <th>compliment_count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>AGNUgVwnZUey3gcPCJ76iw</td>\n      <td>3uLgwr0qeCNMjKenHJwPGQ</td>\n      <td>Avengers time with the ladies.</td>\n      <td>2012-05-18 02:17:21</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>NBN4MgHP9D3cw--SnauTkA</td>\n      <td>QoezRbYQncpRqyrLH6Iqjg</td>\n      <td>They have lots of good deserts and tasty cuban...</td>\n      <td>2013-02-05 18:35:10</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>-copOvldyKh1qr-vzkDEvw</td>\n      <td>MYoRNLb5chwjQe3c_k37Gg</td>\n      <td>It's open even when you think it isn't</td>\n      <td>2013-08-18 00:56:08</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>FjMQVZjSqY8syIO-53KFKw</td>\n      <td>hV-bABTK-glh5wj31ps_Jw</td>\n      <td>Very decent fried chicken</td>\n      <td>2017-06-27 23:05:38</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>ld0AperBXk1h6UbqmM80zw</td>\n      <td>_uN0OudeJ3Zl_tf6nxg5ww</td>\n      <td>Appetizers.. platter special for lunch</td>\n      <td>2012-10-06 19:43:09</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>908910</th>\n      <td>eYodOTF8pkqKPzHkcxZs-Q</td>\n      <td>3lHTewuKFt5IImbXJoFeDQ</td>\n      <td>Disappointed in one of your managers.</td>\n      <td>2021-09-11 19:18:57</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>908911</th>\n      <td>1uxtQAuJ2T5Xwa_wp7kUnA</td>\n      <td>OaGf0Dp56ARhQwIDT90w_g</td>\n      <td>Great food and service.</td>\n      <td>2021-10-30 11:54:36</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>908912</th>\n      <td>v48Spe6WEpqehsF2xQADpg</td>\n      <td>hYnMeAO77RGyTtIzUSKYzQ</td>\n      <td>Love their Cubans!!</td>\n      <td>2021-11-05 13:18:56</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>908913</th>\n      <td>ckqKGM2hl7I9Chp5IpAhkw</td>\n      <td>s2eyoTuJrcP7I_XyjdhUHQ</td>\n      <td>Great pizza great price</td>\n      <td>2021-11-20 16:11:44</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>908914</th>\n      <td>4tF1CWdMxvvwpUIgGsDygA</td>\n      <td>_cb1Vg1NIWry8UA0jyuXnQ</td>\n      <td>Food is good value but a bit hot!</td>\n      <td>2021-12-07 22:30:00</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>908915 rows Ã— 5 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"class preprocessing:\n    def __init__(self,text):\n        self.text=text\n        self.words=None\n    def clear(self):\n        clean = re.compile('<.*?>')\n        self.text =  re.sub(clean, '', self.text)\n        self.text= re.sub(r\"[^a-zA-Z]\",\" \",self.text)\n        self.text = re.sub(r'\\s+', ' ', self.text)\n    def Normalization(self):\n        self.text=self.text.lower()\n#         print(self.text)\n    def Tokenization(self):\n        self.words = word_tokenize(self.text)\n#         print(self.words)\n    def del_stop_words(self):\n        stop_words = set(stopwords.words('english'))\n        self.words=[word for word in self.words if (word not in stop_words)]\n    def stemming(self):\n        stemmer = PorterStemmer()\n        self.words = [stemmer.stem(word) for word in self.words]\n    def unique_words(self):\n        return set(self.words)\n    def return_string(self):\n        return ' '.join(self.words)\n    def del_char (self):\n        self.words=[word for word in self.words if (len(word)>1)]","metadata":{"execution":{"iopub.status.busy":"2024-04-14T16:11:41.374202Z","iopub.execute_input":"2024-04-14T16:11:41.374777Z","iopub.status.idle":"2024-04-14T16:11:41.388574Z","shell.execute_reply.started":"2024-04-14T16:11:41.374726Z","shell.execute_reply":"2024-04-14T16:11:41.386730Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"def clean_document (document):\n    cleaner = preprocessing(document)\n    cleaner.clear()\n    cleaner.Normalization()\n    cleaner.Tokenization()\n    cleaner.del_stop_words()\n    cleaner.stemming()\n    cleaner.del_char()\n    output = cleaner.unique_words()\n    return output ","metadata":{"execution":{"iopub.status.busy":"2024-04-14T16:11:41.390939Z","iopub.execute_input":"2024-04-14T16:11:41.391342Z","iopub.status.idle":"2024-04-14T16:11:41.401979Z","shell.execute_reply.started":"2024-04-14T16:11:41.391301Z","shell.execute_reply":"2024-04-14T16:11:41.400602Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"markdown","source":"### 10 Words","metadata":{}},{"cell_type":"code","source":"words = ['warning' , 'nomination' , 'bar' , 'air' , 'acceptance' , 'cigarette' , 'organ' , 'precedent' , 'reveal', 'apparatus']\nwords","metadata":{"execution":{"iopub.status.busy":"2024-04-14T16:21:11.268054Z","iopub.execute_input":"2024-04-14T16:21:11.268717Z","iopub.status.idle":"2024-04-14T16:21:11.279341Z","shell.execute_reply.started":"2024-04-14T16:21:11.268674Z","shell.execute_reply":"2024-04-14T16:21:11.277854Z"},"trusted":true},"execution_count":28,"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"['warning',\n 'nomination',\n 'bar',\n 'air',\n 'acceptance',\n 'cigarette',\n 'organ',\n 'precedent',\n 'reveal',\n 'apparatus']"},"metadata":{}}]},{"cell_type":"markdown","source":"### From Scratch Fast Text","metadata":{}},{"cell_type":"code","source":"# Take Samlpe contain 10000 text \nX_train = ds.sample(10000)['text'].tolist()","metadata":{"execution":{"iopub.status.busy":"2024-04-14T16:21:14.174267Z","iopub.execute_input":"2024-04-14T16:21:14.175920Z","iopub.status.idle":"2024-04-14T16:21:14.233788Z","shell.execute_reply.started":"2024-04-14T16:21:14.175860Z","shell.execute_reply":"2024-04-14T16:21:14.232421Z"},"trusted":true},"execution_count":29,"outputs":[]},{"cell_type":"code","source":"new_x_train = []\nfor text in X_train :\n    new_text = clean_document(text)\n    new_x_train.append([text for text in new_text])\nX_train = new_x_train","metadata":{"execution":{"iopub.status.busy":"2024-04-14T16:21:14.642860Z","iopub.execute_input":"2024-04-14T16:21:14.643398Z","iopub.status.idle":"2024-04-14T16:21:21.835589Z","shell.execute_reply.started":"2024-04-14T16:21:14.643361Z","shell.execute_reply":"2024-04-14T16:21:21.834267Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"code","source":"fast_text_model = FastText(sentences=X_train, vector_size=100, window=5, min_count=1, sg=1 , min_n=3, max_n=6)","metadata":{"execution":{"iopub.status.busy":"2024-04-14T16:21:21.839465Z","iopub.execute_input":"2024-04-14T16:21:21.839977Z","iopub.status.idle":"2024-04-14T16:21:26.900169Z","shell.execute_reply.started":"2024-04-14T16:21:21.839943Z","shell.execute_reply":"2024-04-14T16:21:26.898930Z"},"trusted":true},"execution_count":31,"outputs":[]},{"cell_type":"code","source":"def get_least_similar_words(model, word, topn=5):\n        word_vector = model.wv[word]\n        similarities = model.wv.cosine_similarities(word_vector, model.wv.vectors)\n\n        vocab = model.wv.index_to_key\n        word_similarities = list(zip(vocab, similarities))\n\n        word_similarities.sort(key=lambda x: x[1])  # Sort based on similarity (lower similarity first)\n        \n        least_similar_words = [(w, s) for w, s in word_similarities if w != word][:topn]\n\n        return least_similar_words","metadata":{"execution":{"iopub.status.busy":"2024-04-14T16:21:26.902426Z","iopub.execute_input":"2024-04-14T16:21:26.903418Z","iopub.status.idle":"2024-04-14T16:21:26.911790Z","shell.execute_reply.started":"2024-04-14T16:21:26.903370Z","shell.execute_reply":"2024-04-14T16:21:26.910456Z"},"trusted":true},"execution_count":32,"outputs":[]},{"cell_type":"markdown","source":"#### Top 10 similar and least similar words","metadata":{}},{"cell_type":"code","source":"for word in words :\n    similar_words = fast_text_model.wv.most_similar(word, topn=10)\n    least_similar_words = get_least_similar_words(fast_text_model , word , topn=10)\n    print(f'Word : {word}\\n')\n    print(f'its top 10 similar words = \\n')\n    for t in similar_words:\n        print(t[0])\n    print('\\n')\n    print(f'its top 10 Least similar words = \\n')\n    for t in least_similar_words:\n        print(t[0])\n    print('\\n')","metadata":{"execution":{"iopub.status.busy":"2024-04-14T16:21:26.915454Z","iopub.execute_input":"2024-04-14T16:21:26.916353Z","iopub.status.idle":"2024-04-14T16:21:27.228790Z","shell.execute_reply.started":"2024-04-14T16:21:26.916295Z","shell.execute_reply":"2024-04-14T16:21:27.227189Z"},"trusted":true},"execution_count":33,"outputs":[{"name":"stdout","text":"Word : warning\n\nits top 10 similar words = \n\nheard\nwarhol\ndont\nbling\nstrang\ndownsid\npathet\ninconveni\npanang\ncontinu\n\n\nits top 10 Least similar words = \n\nqq\nfjf\nfood\nservic\natmosf\ngreat\nservicio\natmospher\nbbfood\nfriendli\n\n\nWord : nomination\n\nits top 10 similar words = \n\ncondition\nproffesion\nconsistantli\nscallion\nimportantli\nrelationship\nopinion\npretenti\nbastard\nprovel\n\n\nits top 10 Least similar words = \n\nqq\nfjf\nfood\nservic\natmosf\ngreat\nservicio\ntk\nday\natmospher\n\n\nWord : bar\n\nits top 10 similar words = \n\nbarq\nbartendar\nexpect\nlocat\nself\nseattlit\nkrinkl\nprime\nbat\nbarr\n\n\nits top 10 Least similar words = \n\nqq\nfjf\nfood\nservic\nday\natmosf\ntk\ngreat\nservicio\nncv\n\n\nWord : air\n\nits top 10 similar words = \n\nupstair\nparticularli\nconvent\nentertain\ncomplain\npackag\nprogram\ncorpor\nthenicrowav\nwashington\n\n\nits top 10 Least similar words = \n\nqq\nfjf\nfood\nservic\natmosf\ngreat\nservicio\natmospher\nbbfood\nfriendli\n\n\nWord : acceptance\n\nits top 10 similar words = \n\ncomparison\nford\ncompon\nsmoothi\nconquistador\npromot\nformal\nacknowledg\nunproffesion\nclementin\n\n\nits top 10 Least similar words = \n\nqq\nfjf\nfood\nservic\natmosf\ngreat\nservicio\natmospher\nbbfood\nfriendli\n\n\nWord : cigarette\n\nits top 10 similar words = \n\ncigarett\ngroceri\nindonesian\nownership\nmeter\nsouthern\namericano\nfoster\ngroomer\nrotisseri\n\n\nits top 10 Least similar words = \n\nqq\nfjf\nfood\nservic\natmosf\ngreat\nservicio\natmospher\nbbfood\nfriendli\n\n\nWord : organ\n\nits top 10 similar words = \n\ngrouch\nsolicit\ntrinidadian\naesthetician\nporch\nbel\ntanzanian\nmeatloaf\nsicillian\nsaunder\n\n\nits top 10 Least similar words = \n\nqq\nfjf\nfood\nservic\natmosf\ngreat\nservicio\ntk\natmospher\nfriendli\n\n\nWord : precedent\n\nits top 10 similar words = \n\nrent\ninattent\ntent\nclient\nquintessenti\nreport\ndistanc\nancient\ninstantli\npleasant\n\n\nits top 10 Least similar words = \n\nqq\nfjf\nfood\nservic\natmosf\ngreat\nservicio\ntk\natmospher\nbbfood\n\n\nWord : reveal\n\nits top 10 similar words = \n\neither\nsmother\nelsewher\noverflow\ndresser\nfounder\nstarter\nanywher\nbarista\nper\n\n\nits top 10 Least similar words = \n\nqq\nfjf\nfood\nservic\natmosf\ntk\nday\ngreat\nservicio\natmospher\n\n\nWord : apparatus\n\nits top 10 similar words = \n\nappar\nappear\nhaley\nharass\nhate\nsignatur\nappt\nhazard\nhoppin\nhalloween\n\n\nits top 10 Least similar words = \n\nqq\nfjf\nfood\nservic\natmosf\ngreat\nservicio\natmospher\nbbfood\nfriendli\n\n\n","output_type":"stream"}]},{"cell_type":"markdown","source":"### Pretrained Fast text Model ","metadata":{}},{"cell_type":"code","source":"def get_least_similar_words_Fast_text_pretrained(model, word, topn=5):\n        word_vector = model.get_word_vector(word)\n        vocab = model.get_words()\n        print('begin1')\n        embedd_matrix = model.get_input_matrix()\n        similarities = [cosine_similarity(word_vector.reshape(1, -1), embedd_matrix[i].reshape(1, -1)) for i in range(len(vocab))]\n        print('end1')\n        word_similarities = list(zip(vocab, similarities))\n        print('begin')\n        word_similarities.sort(key=lambda x: x[1])\n        print('end1')\n        least_similar_words = [(w, s) for w, s in word_similarities if w != word][:topn]\n\n        return least_similar_words","metadata":{"execution":{"iopub.status.busy":"2024-04-14T16:43:10.740445Z","iopub.execute_input":"2024-04-14T16:43:10.741835Z","iopub.status.idle":"2024-04-14T16:43:10.751127Z","shell.execute_reply.started":"2024-04-14T16:43:10.741797Z","shell.execute_reply":"2024-04-14T16:43:10.749786Z"},"trusted":true},"execution_count":55,"outputs":[]},{"cell_type":"code","source":"print(words[1])\nft.get_nearest_neighbors(words[1], k = 10)","metadata":{"execution":{"iopub.status.busy":"2024-04-14T16:43:12.213745Z","iopub.execute_input":"2024-04-14T16:43:12.214422Z","iopub.status.idle":"2024-04-14T16:43:13.398715Z","shell.execute_reply.started":"2024-04-14T16:43:12.214388Z","shell.execute_reply":"2024-04-14T16:43:13.397153Z"},"trusted":true},"execution_count":56,"outputs":[{"name":"stdout","text":"nomination\n","output_type":"stream"},{"execution_count":56,"output_type":"execute_result","data":{"text/plain":"[(0.7482772469520569, 'nominee'),\n (0.7463177442550659, 'nomination.The'),\n (0.7419816255569458, 'nominations'),\n (0.7289596796035767, 'Nomination'),\n (0.7118630409240723, 'nomination-'),\n (0.7016364932060242, 'nomination.'),\n (0.6814758777618408, 'nominated'),\n (0.6701787114143372, 'nomination.I'),\n (0.6685086488723755, 'nominating'),\n (0.6631316542625427, 're-nomination')]"},"metadata":{}}]},{"cell_type":"code","source":"for word in words :\n    similar_words = ft.get_nearest_neighbors(word, k = 10)\n    least_similar_words = get_least_similar_words_Fast_text_pretrained(ft , word , topn=10)\n    print(f'Word : {word}\\n')\n    print(f'its top 10 similar words = \\n')\n    for t in similar_words:\n        print(t[1])\n    print('\\n')\n    print(f'its top 10 Least similar words = \\n')\n    for t in least_similar_words:\n        print(t[0])\n    print('\\n')","metadata":{"execution":{"iopub.status.busy":"2024-04-14T16:43:13.400780Z","iopub.execute_input":"2024-04-14T16:43:13.401128Z","iopub.status.idle":"2024-04-14T16:52:09.522103Z","shell.execute_reply.started":"2024-04-14T16:43:13.401099Z","shell.execute_reply":"2024-04-14T16:52:09.519914Z"},"trusted":true},"execution_count":57,"outputs":[{"name":"stdout","text":"begin1\n","output_type":"stream"},{"name":"stderr","text":"\nKeyboardInterrupt\n\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}